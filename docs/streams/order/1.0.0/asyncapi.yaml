asyncapi: 2.6.0
info:
  version: 1.0.0
  title: Service Name
  description: Service that handles A Domain.

servers:
  Topic:
    url: yourdomainname-sns-topic
    protocol: HTTP

channels:
  OrderService:
    servers:
      - Topic
    subscribe:
      summary: Subscribe to receive notification events.
      message:
        oneOf:
          - $ref: '#/components/messages/OrderNotificationEvent'
          - $ref: '#/components/messages/OrderIntegrationEvent'

components:
  messages:
    OrderIntegrationEvent:
      name: OrderIntegrationEvent
      payload:
        $ref: '#/components/schemas/OrderIntegrationEvent'
    OrderNotificationEvent:
      name: OrderNotificationEvent
      payload:
        $ref: '#/components/schemas/OrderNotificationEvent'
  schemas:
    EventMetadata:
      type: object
      required:
        - orderId
      properties:
        orderId:
          type: string
        productId:
          type: string
    EventDetails:
      type: object
      required:
        - price
        - quantity
      properties:
        price:
          type: number
        quantity:
          type: integer
    EventData:
      allOf:
        - $ref: '#/components/schemas/EventDetails'
        - $ref: '#/components/schemas/EventMetadata'
    OrderNotificationEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
    OrderIntegrationEvent:
      allOf:
        - $ref: '#/components/schemas/Event'
        - type: object
          required:
            - data
          properties: 
            data:
              description: |
                The data represents the business related information.
                The dataformat respects the dataCOnentType ( JSON at the moment ).
              allOf:
                - $ref: '#/components/schemas/EventData'
    Event:
      type: object
      required:
      - specVersion
      - time
      - id
      - source
      - type
      - idempotencyKey
      properties:
        specVersion:
          type: string
          default: "1.0.2"
        time:
          type: string
          format: date-time
        id:
          type: string
          description: |
            An event identifier that must be unique for the source context
        source:
          type: string
          description: |
            reprenets the information to identify the event producer
          examples:
            - Domain.order.Application
        subject:
          type: string
          description: |
            This represents complementary info to help better identify the event.
            This is under study for the moment. 
        type:
          type: string
          description: |
            define the type of events representing a change in te system occured.
          enum:
          - order.received.v1
          - order.confirmed.v1
          - order.validated.v1
          - order.rejected.v1
        category:
          type: string
          description: |
            The category defines the different categories of events helping the consumers for filtering.
            This is useful if there are multiple category of events publishing in the same broker.
            The consumers can decide based on category how they would like to process the event 
              - Are they intersted about Notifications? 
              - Are they intersted about Integration Evnets? 
              - How the need to parse the data , actually if it's needed ? 
              - Detect the standard format behind the event, Delta , Domain , Aggregated, Integration or Notification Event ? 
          enum:
          - IntegrationEvent
          - DomainEvent
          - NotificationEvent
          - DeltaEvent
          - EventCarriedStateTransfer
        idempotencyKey:
          type: string
          description: |
            This is a unique key produced to help consumers better handle the idempotency in case of retries.   
            here and example of generating an idempotencyKey in nodejs
            ```
            const idempotencyKey: string = uuidV5(
              JSON.stringify(order),
              namespaces.orders
            );
            ```
        dataContentType:
          type: string
          default: JSON
          description: |
            The dataContentType defines the format used in data object and helps for parsing purpose. 
            NOTE: The actual decision is use the JSON as an standard, this can be evolved in the future.
          enum:
          - JSON
          - AVRO
          - PROTOBUF
        dataSchema:
          type: string
          description: |
            The path to json-schema or asyncapi schema provided by producer to be used in validation part.
            This must be better clarified during the study and with examples.
        dataVersion:
          type: string
          description: |
            The data version , this helps the consumers to better automate and treat the Parsing, Filtering and validation of events.
